services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voz_dash 
      
  broker:
    image: confluentinc/cp-server:latest
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - voz_dash
    healthcheck:
      test: ['CMD', 'kafka-topics', '--bootstrap-server', 'localhost:9092', '--list']
      interval: 30s
      timeout: 10s
      retries: 5
      
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - voz_dash
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - voz_dash
  offset-reset:
    image: confluentinc/cp-kafka:latest
    depends_on:
      broker:
        condition: service_healthy
    command: >
      bash -c '
      echo "Waiting for Kafka to be ready..."
      cub kafka-ready -b broker:29092 1 30
      echo "Resetting offsets for all consumer groups..."
      kafka-consumer-groups --bootstrap-server broker:29092 --list | xargs -I{} kafka-consumer-groups --bootstrap-server broker:29092 --group {} --reset-offsets --to-earliest --all-topics --execute
      echo "Offset reset completed."
      '
    networks:
      - streamingkaf

  spark_master:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8090:8080"
      - "7077:7077"
    networks:
      - streamingkaf


  spark_worker:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark_master
    networks:
      - streamingkaf
    environment:
      SPARK_MODE: Worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077

      
  # db:
  #   image: postgres:13
  #   volumes:
  #     - ./VOZ_neww/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: vozdb
  #   ports:
  #     - "5433:5432"
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #     broker:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - voz_dash

  # api:
  #   build: ./VOZ_neww
  #   command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./VOZ_neww:/app
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://postgres:postgres@db:5432/vozdb
  #   networks:
  #     - voz_dash

  # scrapy:
  #   build: ./VOZ_neww
  #   command: ["scrapy", "crawl", "demospider"]
  #   volumes:
  #     - ./VOZ_neww:/app
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - voz_dash

  # frontend:
  #   build: ./vite-project
  #   ports:
  #     - "5173:5173"
  #   networks:
  #     - voz_dash

       
networks:
  voz_dash:
    driver: bridge